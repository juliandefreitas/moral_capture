## clear workspace
rm(list = ls())
## necessary libraries
if (!require(psych)) {install.packages("psych"); require(psych)}
if (!require(fmsb)) {install.packages("fmsb"); require(fmsb)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
dir <- setwd("/Users/julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/e3b_eliminating_motion/description_coding")
data <- read.csv('e3b_coded_descriptions.csv')
head(data)
manUncertainty_codes <- data$julian_manUncertainty_codes
carHitMan_codes <- data$julian_carHitMan_codes
manUncertainty_codes
sum(manUncertainty_codes)
length(manUncertainty_codes)
#proportion of people who were uncertain what happened to the man at the end
sum(manUncertainty_codes)/length(manUncertainty_codes)
#proportion of people who were uncertain what happened to the man at the end
(sum(manUncertainty_codes)/length(manUncertainty_codes))*100
#proportion of people who clearly indicated that they saw a car hit the man
(sum(carHitMan_codes)/length(manUncertainty_codes))*100
rm(list = ls())
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots")3; require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(lsr)) {install.packages("lsr"); require(lsr)}
if (!require(lsmeans)) {install.packages("lsmeans"); require(lsmeans)}
dir <- setwd("/Users/Julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/e3a_grouping/data_and_analysis/data")
files <- list.files(pattern=('*txt'))
myJSON <- lapply(files, function(x) fromJSON(file=x)) #join into one single JSON file
dir <- setwd("/Users/Julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/moralCapture/e3a_grouping/data_and_analysis/data")
dir <- setwd("/Users/julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/moral_capture/e3a_grouping/data_and_analysis/data")
files <- list.files(pattern=('*txt'))
myJSON <- lapply(files, function(x) fromJSON(file=x)) #join into one single JSON file
(data <- lapply(myJSON, function(myJSON) { as.data.frame(myJSON) }))
data <- (data <- do.call(rbind, data))
# num ss recruited
dim(data) #837
#data after comprehension exclusions
data <- subset(data,(data$trialStruct.comprehension == "E"))
dim(data)
data <-subset(data,(data$trialStruct.displayTime < 4225 & data$trialStruct.displayTime > 4175))
dim(data) #722
837-722 #115 excluded
# demographics
sex <- as.factor(data$trialStruct.sex)
table(sex)[2]/sum(table(sex))
age <- as.numeric(levels(data$trialStruct.age))[data$trialStruct.age]
mean(age, na.rm = TRUE)
## clear workspace
rm(list = ls())
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots")3; require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(lsr)) {install.packages("lsr"); require(lsr)}
if (!require(lsmeans)) {install.packages("lsmeans"); require(lsmeans)}
##================ import data ================================================================================================
dir <- setwd("/Users/julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/moral_capture/e3a_grouping/data_and_analysis/data")
files <- list.files(pattern=('*txt'))
myJSON <- lapply(files, function(x) fromJSON(file=x)) #join into one single JSON file
(data <- lapply(myJSON, function(myJSON) { as.data.frame(myJSON) }))
data <- (data <- do.call(rbind, data))
# num ss recruited
dim(data) #837
#data after comprehension exclusions
data <- subset(data,(data$trialStruct.comprehension == "E"))
dim(data)
data <-subset(data,(data$trialStruct.displayTime < 4225 & data$trialStruct.displayTime > 4175))
dim(data) #722
837-722 #115 excluded
# demographics
sex <- as.factor(data$trialStruct.sex)
table(sex)[2]/sum(table(sex))
age <- as.numeric(levels(data$trialStruct.age))[data$trialStruct.age]
mean(age, na.rm = TRUE)
# exclusions
data <- subset(data,(data$trialStruct.whichCar_choice == 2))
dim(data) #521
100- (((722-521)/722)*100)
# conditions:
#0 = no context
#1 = many logs, motion
#2 = some logs, motion
#3 = few logs, motion
#4 = many logs, no motion
#5 = many logs, opposite
##======================= processing =======================================================================================
#motion type
for(i in 1:dim(data)[1]) {
if(data$trialStruct.cond[i]==1 || data$trialStruct.cond[i]==2 || data$trialStruct.cond[i]==3) {
data$motionType[i] = 1
data$motionType_name[i] = "motion"
}
else if(data$trialStruct.cond[i]==4) {
data$motionType[i] = 2
data$motionType_name[i] = "static"
}
else if(data$trialStruct.cond[i]==5) {
data$motionType[i] = 3
data$motionType_name[i] = "opposite"
}
else if(data$trialStruct.cond[i]==0) {
data$motionType[i] = 0
data$motionType_name[i] = "none"
}
}
#numlogs
for(i in 1:dim(data)[1]) {
if(data$trialStruct.cond[i]==1 || data$trialStruct.cond[i]==4 || data$trialStruct.cond[i]==5 ) {
data$numLogs[i] = 1
data$numLogs_name[i] = "many"
}
else if(data$trialStruct.cond[i]==2) {
data$numLogs[i] = 2
data$numLogs_name[i] = "some"
}
else if(data$trialStruct.cond[i]==3) {
data$numLogs[i] = 3
data$numLogs_name[i] = "few"
}
else if(data$trialStruct.cond[i]==0) {
data$numLogs[i] = 0
data$numLogs_name[i] = "none"
}
}
condNames <- c('Many logs','Some Logs','Few Logs','Static','Opposite Motion')
## assign variable names
cond <- as.factor(data$trialStruct.cond)
numLogs <- as.factor(data$numLogs_name)
motionType <- as.numeric(data$motionType)
blame <- as.numeric(levels(data$trialStruct.blame_scaled))[data$trialStruct.blame_scaled]
blame_choice <- as.factor(data$trialStruct.blame_choice)
# baseline
baseline_mean <- mean(blame[cond == 0]); baseline_mean
baseline_sd <- sd(blame[cond==0]); baseline_sd
baseline_length <- length(blame[cond == 0]); baseline_length
baseline_sem <- baseline_sd/sqrt(baseline_length); baseline_sem
baseline_add_sem <- baseline_mean + baseline_sem
baseline_minus_sem <- baseline_mean - baseline_sem
##============================= plot ============================================================================================
alpha = .05;
numConds = 5;
blame_mat <- matrix(NA,numConds,5)
colnames(blame_mat) <- c('cond','mean','sd','n','sem')
for (i in 1:numConds) {
blame_mat[i,] <- c(i,mean(blame[cond == i]),sd(blame[cond==i]), length(blame[cond == i]),0)
blame_mat[i,5] <- blame_mat[i,3]/sqrt(blame_mat[i,4])
}
blame.summary <- as.data.frame(blame_mat, stringsAsFactors=F)
condNames <- c('Many logs','Some Logs','Few Logs','Static','Opposite Motion')
group.colors <- c("1" = "#808080", "2" = "#808080","3" = "#4682B4", "4" = "#4682B4", "5" = "#0680f9","6" = "#0680f9","7" = "#67C8FF")
#quartz(width=7)
## bar plot - blame scaled
title <- c('Blame Judgments')
p1<-ggplot(blame.summary,aes(x=factor(cond),y=mean,fill=factor(cond))) +
scale_fill_manual(values=group.colors) +
stat_summary(fun.y=mean,position=position_dodge(),geom="bar")+theme_bw()+coord_cartesian(ylim=c(1, 8))
p1+geom_errorbar(aes(ymax=mean+sem, ymin=mean-sem), position="dodge")+ggtitle(title)+
scale_x_discrete(breaks = 1:length(condNames), labels=condNames)+
theme(panel.grid.major = element_blank(),legend.position="none", panel.grid.minor = element_blank(), axis.title.y=element_blank())+
theme(text = element_text(size=20), axis.text.x = element_text(angle = 45, hjust=1))+
xlab("Condition")+ylab("Mean") + geom_hline(yintercept = baseline_add_sem) +
geom_hline(yintercept = baseline_minus_sem) + geom_hline(yintercept = baseline_mean, lty=5)
## bar plot - blame mcq
blameTable <- matrix(NA,6)
blameTable[1] <- length(blame_choice[cond==1 & blame_choice==1])/length(blame_choice[cond==1])
blameTable[2] <- length(blame_choice[cond==2 & blame_choice==1])/length(blame_choice[cond==2])
blameTable[3] <- length(blame_choice[cond==3 & blame_choice==1])/length(blame_choice[cond==3])
blameTable[4] <- length(blame_choice[cond==4 & blame_choice==1])/length(blame_choice[cond==4])
blameTable[5] <- length(blame_choice[cond==5 & blame_choice==1])/length(blame_choice[cond==5])
blameTable[6] <- length(blame_choice[cond==0 & blame_choice==1])/length(blame_choice[cond==0])
barplot(blameTable[1:5], beside=TRUE,ylim=c(0,1.0), col=group.colors,
legend.text=TRUE, main="Proportion Blaming Driver of Red Car", cex.axis=1.0, cex.main = 1.5,names = condNames,ylab="Proportion")
abline(a= blameTable[6], b = 0)
##============================= analysis: blame scaled =================================================================================
#motion type
#1 = same direction, 2 = static, 3 = opposite, 0 = absent
#numLogs
#1 = many, 2 = some, 3 = few, 4 = none
motionType <- as.factor(data$motionType)
model1 <- lm(blame ~ motionType) #simple model
summary(model1)
#simple comparisons: model 1
means <- lsmeans(model1, specs = ~ motionType); means
tests <- contrast(means, method="pairwise"); tests
confint(tests)
model2 <- lm(blame ~ motionType + motionType/numLogs)
summary(model2)
means <- lsmeans(model2, specs = ~ motionType + motionType/numLogs)
tests <- contrast(means, method="pairwise"); tests
lrtest(model1,model2) #model 1 is a better fit
-#cohen's d
tes(-7.073, 521, 521) #same v. none;  #0.44
tes(2.961, 521, 521) #same v. opposite; #0.18
tes(4.053, 521, 521) #same v. static; #0.25
tes(-1.050, 521, 521) #none v. static; #0.07
tes(-2.338, 521, 521) #none v. opposite; #0.14
blame_choice
blameTable
