if (!require(lsmeans)) {install.packages("lsmean"); require(lsmeans)}
dir <- setwd("/Users/Julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/e3b_eliminating_motion/data_and_analysis/data")
dir <- setwd("/Users/Julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/FinalExperiments/e3a_grouping/e3a_basicEffect/data")
files <- list.files(pattern=('*txt'))
myJSON <- lapply(files, function(x) fromJSON(file=x)) #join into one single JSON file
(data <- lapply(myJSON, function(myJSON) { as.data.frame(myJSON) }))
data_motion_baseline <- (data_motion_baseline <- do.call(rbind, data))
data_motion_baseline <- data_motion_baseline[data_motion_baseline$trialStruct.cond==0,]
data_motion_baseline$trialStruct.cond <- 2
#exclusions
data_motion_baseline <- subset(data_motion_baseline,(data_motion_baseline$trialStruct.comprehension == "E"))
data_motion_baseline <- subset(data_motion_baseline,(data_motion_baseline$trialStruct.displayTime < 4225 & data_motion_baseline$trialStruct.displayTime > 4175))
data_motion_baseline <- subset(data_motion_baseline,(data_motion_baseline$trialStruct.whichCar_choice == 2))
dim(data_motion_baseline) #89 (same as in E4a, obviously)
dir <- setwd("/Users/Julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/e3b_eliminating_motion/data_and_analysis/data")
dir <- setwd("/Users/Julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/e3a_grouping/data_and_analysis/data")
files <- list.files(pattern=('*txt'))
myJSON <- lapply(files, function(x) fromJSON(file=x)) #join into one single JSON file
(data <- lapply(myJSON, function(myJSON) { as.data.frame(myJSON) }))
data_motion_baseline <- (data_motion_baseline <- do.call(rbind, data))
data_motion_baseline <- data_motion_baseline[data_motion_baseline$trialStruct.cond==0,]
data_motion_baseline$trialStruct.cond <- 2
#exclusions
data_motion_baseline <- subset(data_motion_baseline,(data_motion_baseline$trialStruct.comprehension == "E"))
data_motion_baseline <- subset(data_motion_baseline,(data_motion_baseline$trialStruct.displayTime < 4225 & data_motion_baseline$trialStruct.displayTime > 4175))
data_motion_baseline <- subset(data_motion_baseline,(data_motion_baseline$trialStruct.whichCar_choice == 2))
dim(data_motion_baseline) #89 (same as in E3a, obviously)
dir <- setwd("/Users/Julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/e3b_eliminating_motion/data_and_analysis/data")
files <- list.files(pattern=('*txt'))
myJSON <- lapply(files, function(x) fromJSON(file=x)) #join into one single JSON file
(data <- lapply(myJSON, function(myJSON) { as.data.frame(myJSON) }))
data <- (data <- do.call(rbind, data))
# num ss recruited
dim(data) #283
# data after comprehension exclusion
data <- subset(data,(data$trialStruct.comprehension == "E"))
dim(data) #280
#demographics
sex <- as.factor(data$trialStruct.sex)
table(sex)[2]/sum(table(sex))
age <- as.numeric(levels(data$trialStruct.age))[data$trialStruct.age]
mean(age,na.rm=TRUE)
# data after which car exclusion
data <- subset(data,(data$trialStruct.whichCar_choice == 2))
dim(data) #264
# proportion excluded by which car measure
100 - (((280-264)/280)*100)
data <- rbind(data,data_motion_baseline); dim(data)
numConds = 1
## assign variable names
cond <- as.factor(data$trialStruct.cond)
table(cond)
blame <- as.numeric(levels(data$trialStruct.blame_scaled))[data$trialStruct.blame_scaled]
blame_choice <- as.factor(data$trialStruct.blame_choice)
descrip <- data$trialStruct.descrip
#baseline
baseline_mean <- mean(blame[cond == 0]); baseline_mean
baseline_sd <- sd(blame[cond==0]); baseline_sd
baseline_length <- length(blame[cond == 0]); baseline_length
baseline_sem <- baseline_sd/sqrt(baseline_length); baseline_sem
baseline_add_sem <- baseline_mean + baseline_sem
baseline_minus_sem <- baseline_mean - baseline_sem
alpha = .05;
blame_mat <- matrix(NA,numConds,5)
colnames(blame_mat) <- c('cond','mean','sd','n','sem')
for (i in 1:numConds) {
blame_mat[i,] <- c(i,mean(blame[cond == i]),sd(blame[cond==i]), length(blame[cond == i]),0)
blame_mat[i,5] <- blame_mat[i,3]/sqrt(blame_mat[i,4])
}
blame.summary <- as.data.frame(blame_mat, stringsAsFactors=F)
condNames <- c("Many Logs")
group.colors <- c("1" = "gray")
## bar plot - blame scaled
title <- c('Blame Judgments')
p1<-ggplot(blame.summary,aes(x=factor(cond),y=mean,fill=factor(cond))) +
scale_fill_manual(values=group.colors) +
stat_summary(fun.y=mean,position=position_dodge(),geom="bar")+theme_bw()+coord_cartesian(ylim=c(1, 8))
p1+geom_errorbar(aes(ymax=mean+sem, ymin=mean-sem), position="dodge")+ggtitle(title)+
scale_x_discrete(breaks = 1:length(condNames), labels=condNames)+
theme(panel.grid.major = element_blank(),legend.position="none", panel.grid.minor = element_blank(), axis.title.y=element_blank())+
theme(text = element_text(size=20), axis.text.x = element_text(angle = 45, hjust=1))+
xlab("Condition")+ylab("Mean") + geom_hline(yintercept = baseline_add_sem) +
geom_hline(yintercept = baseline_minus_sem) + geom_hline(yintercept = baseline_mean, lty=5)
## bar plot - blame mcq
blameTable <- matrix(NA,2)
blameTable[1] <- length(blame_choice[cond==1 & blame_choice==1])/length(blame_choice[cond==1]) #many logs
blameTable[2] <- length(blame_choice[cond==0 & blame_choice==1])/length(blame_choice[cond==0]) #no context
barplot(blameTable[1], beside=TRUE,ylim=c(0,1.0), col=group.colors,
legend.text=TRUE, main="Proportion Blaming Driver of Red Car", cex.axis=1.0, cex.main = 1.5,names = condNames,ylab="Proportion")
abline(a= blameTable[2], b = 0)
# num subjects in each cond
tapply(blame,cond,length)
tapply(blame,cond,mean)
tapply(blame,cond,sd)
# num subjects in each cond
tapply(blame,cond,length)
tapply(blame,cond,mean)
tapply(blame,cond,sd)
# interrupted motion v interrupted no context
t.test(blame[cond == 1 | cond == 0] ~ cond[cond == 1 | cond == 0], var.equal=TRUE, paired=FALSE)
# num subjects in each cond
tapply(blame,cond,length)
tes(-1.3754, 137, 127) #0.17
# interrupted motion v no context motion
t.test(blame[cond == 1 | cond == 2] ~ cond[cond == 1 | cond == 2], var.equal=TRUE, paired=FALSE)
tes(1.0123, 137, 89) #d=0.14
## clear workspace
rm(list = ls())
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(lsr)) {install.packages("lsr"); require(lsr)}
##================ import no context and motion conditions from E3a =========================================================================
dir <- setwd("/Users/Julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/e3a_grouping/data_and_analysis/data")
files <- list.files(pattern=('*txt'))
myJSON <- lapply(files, function(x) fromJSON(file=x)) #join into one single JSON file
(data_motion <- lapply(myJSON, function(myJSON) { as.data.frame(myJSON) }))
data_motion <- (data_motion <- do.call(rbind, data_motion))
data_motion <- data_motion[data_motion$trialStruct.cond==0 | data_motion$trialStruct.cond==1,]
data_motion$trialStruct.cond <- data_motion$trialStruct.cond + 1
data_motion$experiment <- 1
#exclusions
data_motion <- subset(data_motion,(data_motion$trialStruct.comprehension == "E"))
data_motion <- subset(data_motion,(data_motion$trialStruct.displayTime < 4225 & data_motion$trialStruct.displayTime > 4175))
data_motion <- subset(data_motion, (data_motion$trialStruct.whichCar_choice == 2))
dim(data_motion) #202 (same as in E3a, obviously)
dir <- setwd("/Users/Julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/e3b_eliminating_motion/data_and_analysis/data")
files <- list.files(pattern=('*txt'))
myJSON <- lapply(files, function(x) fromJSON(file=x)) #join into one single JSON file
(data_static <- lapply(myJSON, function(myJSON) { as.data.frame(myJSON) }))
data_static <- (data_static <- do.call(rbind, data_static))
data_static$trialStruct.cond <- data_static$trialStruct.cond + 1
data_static$experiment <- 2
# data after comprehension exclusion
data_static <- subset(data_static,(data_static$trialStruct.comprehension == "E"))
dim(data_static) #280
#demographics
sex <- as.factor(data_static$trialStruct.sex)
table(sex)[2]/sum(table(sex))
age <- as.numeric(levels(data_static$trialStruct.age))[data_static$trialStruct.age]
mean(age,na.rm=TRUE)
# data after which car exclusion
data_static <- subset(data_static,(data_static$trialStruct.whichCar_choice == 2))
dim(data_static) #264
# proportion excluded by which car measure
100 - (((280-264)/280)*100)
data <- rbind(data_motion,data_static); dim(data)
## assign variable names
cond <- as.factor(data$trialStruct.cond)
cond
## clear workspace
rm(list = ls())
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(lsr)) {install.packages("lsr"); require(lsr)}
##================ import no context and motion conditions from E3a =========================================================================
dir <- setwd("/Users/Julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/e3a_grouping/data_and_analysis/data")
files <- list.files(pattern=('*txt'))
myJSON <- lapply(files, function(x) fromJSON(file=x)) #join into one single JSON file
(data_motion <- lapply(myJSON, function(myJSON) { as.data.frame(myJSON) }))
data_motion <- (data_motion <- do.call(rbind, data_motion))
data_motion <- data_motion[data_motion$trialStruct.cond==0 | data_motion$trialStruct.cond==1,]
head(data_motion)
data_motion$trialStruct.cond <- data_motion$trialStruct.cond + 1
head(data_motion)
data_motion$experiment <- 1
#exclusions
data_motion <- subset(data_motion,(data_motion$trialStruct.comprehension == "E"))
data_motion <- subset(data_motion,(data_motion$trialStruct.displayTime < 4225 & data_motion$trialStruct.displayTime > 4175))
data_motion <- subset(data_motion, (data_motion$trialStruct.whichCar_choice == 2))
dim(data_motion) #202 (same as in E3a, obviously)
dir <- setwd("/Users/Julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/e3b_eliminating_motion/data_and_analysis/data")
files <- list.files(pattern=('*txt'))
myJSON <- lapply(files, function(x) fromJSON(file=x)) #join into one single JSON file
(data_static <- lapply(myJSON, function(myJSON) { as.data.frame(myJSON) }))
data_static <- (data_static <- do.call(rbind, data_static))
head(data_static)
data_static$trialStruct.cond
data_static$trialStruct.condName
labels(data_static)
head(data_static$trialStruct.condName)
head(data_static$trialStruct.cond)
data_static$trialStruct.cond <- data_static$trialStruct.cond + 1
data_static$experiment <- 2
# data after comprehension exclusion
data_static <- subset(data_static,(data_static$trialStruct.comprehension == "E"))
dim(data_static) #280
#demographics
sex <- as.factor(data_static$trialStruct.sex)
table(sex)[2]/sum(table(sex))
age <- as.numeric(levels(data_static$trialStruct.age))[data_static$trialStruct.age]
mean(age,na.rm=TRUE)
# data after which car exclusion
data_static <- subset(data_static,(data_static$trialStruct.whichCar_choice == 2))
dim(data_static) #264
# proportion excluded by which car measure
100 - (((280-264)/280)*100)
data <- rbind(data_motion,data_static); dim(data)
## assign variable names
cond <- as.factor(data$trialStruct.cond)
exp <- as.factor(data$experiment)
table(cond)
blame <- as.numeric(levels(data$trialStruct.blame_scaled))[data$trialStruct.blame_scaled]
blame_choice <- as.factor(data$trialStruct.blame_choice)
whichCar <- as.factor(data$trialStruct.whichCar_choice)
whichCar <- as.factor(data$trialStruct.whichCar_choice)
table(cond)
blame <- as.numeric(levels(data$trialStruct.blame_scaled))[data$trialStruct.blame_scaled]
blame_choice <- as.factor(data$trialStruct.blame_choice)
whichCar <- as.factor(data$trialStruct.whichCar_choice)
## assign variable names
cond <- as.factor(data$trialStruct.cond)
exp <- as.factor(data$experiment)
table(cond)
blame <- as.numeric(levels(data$trialStruct.blame_scaled))[data$trialStruct.blame_scaled]
blame_choice <- as.factor(data$trialStruct.blame_choice)
alpha = .05
numExps = 2
numConds = 2
blame_mat <- matrix(NA,4,7)
colnames(blame_mat) <- c('counter','exp','cond','mean','sd','n','sem')
counter = 1
for (j in 1:numExps) {
for (i in 1:numConds) {
blame_mat[counter,] <- c(counter, j, i, mean(blame[cond == i & exp == j]),sd(blame[cond==i & exp == j]), length(blame[cond == i & exp == j]),0)
blame_mat[counter,7] <- blame_mat[counter,5]/sqrt(blame_mat[counter,6])
counter = counter + 1
}
}
blame.summary <- as.data.frame(blame_mat, stringsAsFactors=F)
condNames <- c("Motion","Static")
title <- c('Blame Judgments')
p1<-ggplot(blame.summary,aes(x=factor(exp),y=mean,fill=factor(cond)))+
stat_summary(fun.y=mean,position=position_dodge(),geom="bar")+theme_bw()+coord_cartesian(ylim=c(1, 8))
p1+geom_errorbar(aes(ymax=mean+sem, ymin=mean-sem), position="dodge")+ggtitle(title)+
scale_x_discrete(breaks = 1:length(condNames), labels=condNames)+
theme(panel.grid.major = element_blank(),legend.position="none", panel.grid.minor = element_blank(), axis.title.y=element_blank())+
theme(text = element_text(size=20), axis.text.x = element_text(angle = 45, hjust=1))+
xlab("Condition")+ylab("Mean")
#blame scaled
scaled_mod <- aov(blame ~ cond*exp)
#blame scaled
scaled_mod <- aov(blame ~ cond*exp)
summary(scaled_mod)
etaSquared(scaled_mod)
blameTable <- matrix(NA,4)
condNames <- c('no context - m','grouping -m','no context -s', 'grouping-m')
blameTable[1] <- length(blame_choice[exp==1 & cond==1 & blame_choice==1])/length(blame_choice[exp==1 & cond==1])
blameTable[2] <- length(blame_choice[exp==1 & cond==2 & blame_choice==1])/length(blame_choice[exp==1 & cond==2])
blameTable[3] <- length(blame_choice[exp==2 & cond==1 & blame_choice==1])/length(blame_choice[exp==2 & cond==1])
blameTable[4] <- length(blame_choice[exp==2 & cond==2 & blame_choice==1])/length(blame_choice[exp==2 & cond==2])
barplot(blameTable, beside=TRUE,ylim=c(0,1.0),
legend.text=TRUE, main="Proportion Blaming Driver of Red Car", cex.axis=1.0, cex.main = 1.5,names = condNames,ylab="Proportion")
abline(a= blameTable[2], b = 0)
blameTable <- matrix(NA,4)
condNames <- c('no context-m','grouping-m','no context-s', 'grouping-s')
blameTable[1] <- length(blame_choice[exp==1 & cond==1 & blame_choice==1])/length(blame_choice[exp==1 & cond==1])
blameTable[2] <- length(blame_choice[exp==1 & cond==2 & blame_choice==1])/length(blame_choice[exp==1 & cond==2])
blameTable[3] <- length(blame_choice[exp==2 & cond==1 & blame_choice==1])/length(blame_choice[exp==2 & cond==1])
blameTable[4] <- length(blame_choice[exp==2 & cond==2 & blame_choice==1])/length(blame_choice[exp==2 & cond==2])
barplot(blameTable, beside=TRUE,ylim=c(0,1.0),
legend.text=TRUE, main="Proportion Blaming Driver of Red Car", cex.axis=1.0, cex.main = 1.5,names = condNames,ylab="Proportion")
blame_mod <- glm(blame_choice ~ cond*exp, family = binomial)
summary(blame_mod)
blameChoiceTable <- table(blame_choice,cond,exp); blameChoiceTable
# many logs v no context
length(cond[cond == 1 | cond == 0])
chisq.test(cond[cond == 1 | cond == 0], blame_choice[cond == 1 | cond == 0])
chisq.test(blameChoiceTable[,1:2])
cramersV(blameChoiceTable[,1:2])
## clear workspace
rm(list = ls())
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(lsr)) {install.packages("lsr"); require(lsr)}
if (!require(lsmeans)) {install.packages("lsmean"); require(lsmeans)}
##================ import no context motion baseline from E3a =========================================================================
dir <- setwd("/Users/Julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/e3a_grouping/data_and_analysis/data")
files <- list.files(pattern=('*txt'))
myJSON <- lapply(files, function(x) fromJSON(file=x)) #join into one single JSON file
(data <- lapply(myJSON, function(myJSON) { as.data.frame(myJSON) }))
data_motion_baseline <- (data_motion_baseline <- do.call(rbind, data))
data_motion_baseline <- data_motion_baseline[data_motion_baseline$trialStruct.cond==0,]
data_motion_baseline$trialStruct.cond <- 2
#exclusions
data_motion_baseline <- subset(data_motion_baseline,(data_motion_baseline$trialStruct.comprehension == "E"))
data_motion_baseline <- subset(data_motion_baseline,(data_motion_baseline$trialStruct.displayTime < 4225 & data_motion_baseline$trialStruct.displayTime > 4175))
data_motion_baseline <- subset(data_motion_baseline,(data_motion_baseline$trialStruct.whichCar_choice == 2))
dim(data_motion_baseline) #89 (same as in E3a, obviously)
##================ import data for E3b ==================================================================================================================
dir <- setwd("/Users/Julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/e3b_eliminating_motion/data_and_analysis/data")
files <- list.files(pattern=('*txt'))
myJSON <- lapply(files, function(x) fromJSON(file=x)) #join into one single JSON file
(data <- lapply(myJSON, function(myJSON) { as.data.frame(myJSON) }))
data <- (data <- do.call(rbind, data))
# num ss recruited
dim(data) #283
# data after comprehension exclusion
data <- subset(data,(data$trialStruct.comprehension == "E"))
dim(data) #280
#demographics
sex <- as.factor(data$trialStruct.sex)
table(sex)[2]/sum(table(sex))
age <- as.numeric(levels(data$trialStruct.age))[data$trialStruct.age]
mean(age,na.rm=TRUE)
# data after which car exclusion
data <- subset(data,(data$trialStruct.whichCar_choice == 2))
dim(data) #264
# proportion excluded by which car measure
100 - (((280-264)/280)*100)
##======================== processing ===============================================================
data <- rbind(data,data_motion_baseline); dim(data)
numConds = 1
## assign variable names
cond <- as.factor(data$trialStruct.cond)
table(cond)
blame <- as.numeric(levels(data$trialStruct.blame_scaled))[data$trialStruct.blame_scaled]
blame_choice <- as.factor(data$trialStruct.blame_choice)
descrip <- data$trialStruct.descrip
#baseline
baseline_mean <- mean(blame[cond == 0]); baseline_mean
baseline_sd <- sd(blame[cond==0]); baseline_sd
baseline_length <- length(blame[cond == 0]); baseline_length
baseline_sem <- baseline_sd/sqrt(baseline_length); baseline_sem
baseline_add_sem <- baseline_mean + baseline_sem
baseline_minus_sem <- baseline_mean - baseline_sem
##============================= plot =====================================================================
alpha = .05;
blame_mat <- matrix(NA,numConds,5)
colnames(blame_mat) <- c('cond','mean','sd','n','sem')
for (i in 1:numConds) {
blame_mat[i,] <- c(i,mean(blame[cond == i]),sd(blame[cond==i]), length(blame[cond == i]),0)
blame_mat[i,5] <- blame_mat[i,3]/sqrt(blame_mat[i,4])
}
blame.summary <- as.data.frame(blame_mat, stringsAsFactors=F)
condNames <- c("Many Logs")
group.colors <- c("1" = "gray")
## bar plot - blame scaled
title <- c('Blame Judgments')
p1<-ggplot(blame.summary,aes(x=factor(cond),y=mean,fill=factor(cond))) +
scale_fill_manual(values=group.colors) +
stat_summary(fun.y=mean,position=position_dodge(),geom="bar")+theme_bw()+coord_cartesian(ylim=c(1, 8))
p1+geom_errorbar(aes(ymax=mean+sem, ymin=mean-sem), position="dodge")+ggtitle(title)+
scale_x_discrete(breaks = 1:length(condNames), labels=condNames)+
theme(panel.grid.major = element_blank(),legend.position="none", panel.grid.minor = element_blank(), axis.title.y=element_blank())+
theme(text = element_text(size=20), axis.text.x = element_text(angle = 45, hjust=1))+
xlab("Condition")+ylab("Mean") + geom_hline(yintercept = baseline_add_sem) +
geom_hline(yintercept = baseline_minus_sem) + geom_hline(yintercept = baseline_mean, lty=5)
## bar plot - blame mcq
blameTable <- matrix(NA,2)
blameTable[1] <- length(blame_choice[cond==1 & blame_choice==1])/length(blame_choice[cond==1]) #many logs
blameTable[2] <- length(blame_choice[cond==0 & blame_choice==1])/length(blame_choice[cond==0]) #no context
barplot(blameTable[1], beside=TRUE,ylim=c(0,1.0), col=group.colors,
legend.text=TRUE, main="Proportion Blaming Driver of Red Car", cex.axis=1.0, cex.main = 1.5,names = condNames,ylab="Proportion")
abline(a= blameTable[2], b = 0)
##============================= analysis: blame scaled ========================================================================
#conds
# 0 = interrupted, no context; 1 = interrupted, motion; 2 = no context, motion
# num subjects in each cond
tapply(blame,cond,length)
tapply(blame,cond,mean)
tapply(blame,cond,sd)
# interrupted motion v interrupted no context
t.test(blame[cond == 1 | cond == 0] ~ cond[cond == 1 | cond == 0], var.equal=TRUE, paired=FALSE)
tes(-1.3754, 137, 127) #0.17
# interrupted motion v no context motion
t.test(blame[cond == 1 | cond == 2] ~ cond[cond == 1 | cond == 2], var.equal=TRUE, paired=FALSE)
tes(1.0123, 137, 89) #d=0.14
#[see separate script for experiment* condition interaction]
##============================= analysis: blame mcq ========================================================================
#[see separate script for experiment* condition interaction]
blameChoiceTable <- table(blame_choice,cond); blameChoiceTable
# many logs v no context
length(cond[cond == 1 | cond == 0])
chisq.test(cond[cond == 1 | cond == 0], blame_choice[cond == 1 | cond == 0])
chisq.test(blameChoiceTable[,1:2])
cramersV(blameChoiceTable[,1:2])
#[see separate script for experiment* condition interaction]
blameTable
blame_noContext_motion <- length(blame_choice[cond==2 & blame_choice==1])/length(blame_choice[cond==2]); blame_noContext_motion
blame_noContext_motion <- length(blame_choice[cond==2 & blame_choice==1])/length(blame_choice[cond==2]); blame_noContext_motion #proportion for E3a no context cond
blameChoiceTable <- table(blame_choice,cond); blameChoiceTable
# many logs v no context
length(cond[cond == 1 | cond == 0])
chisq.test(cond[cond == 1 | cond == 0], blame_choice[cond == 1 | cond == 0])
chisq.test(blameChoiceTable[,1:2])
cramersV(blameChoiceTable[,1:2])
# many logs v no context motion
length(cond[cond == 1 | cond == 2])
chisq.test(cond[cond == 1 | cond == 2], blame_choice[cond == 1 | cond == 2])
chisq.test(blameChoiceTable[,c(2,3)])
cramersV(blameChoiceTable[,c(2,3)])
## clear workspace
rm(list = ls())
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(lsr)) {install.packages("lsr"); require(lsr)}
if (!require(lsmeans)) {install.packages("lsmean"); require(lsmeans)}
dir <- setwd("/Users/Julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/e3c_moral_wrongness/data_and_analysis/data")
files <- list.files(pattern=('*txt'))
myJSON <- lapply(files, function(x) fromJSON(file=x)) #join into one single JSON file
(data <- lapply(myJSON, function(myJSON) { as.data.frame(myJSON) }))
data <- (data <- do.call(rbind, data))
# num ss recruited
dim(data) #281
## clear workspace
rm(list = ls())
## necessary libraries
if (!require(rjson)) {install.packages("rjson"); require(rjson)}
if (!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if (!require(ltm)) {install.packages("ltm"); require(ltm)}
if (!require(heplots)) {install.packages("heplots"); require(heplots)}
if (!require(lmtest)) {install.packages("lmtest"); require(lmtest)}
if (!require(compute.es)) {install.packages("compute.es"); require(compute.es)}
if (!require(lsr)) {install.packages("lsr"); require(lsr)}
if (!require(lsmeans)) {install.packages("lsmean"); require(lsmeans)}
##================ import data ================================================================================================
dir <- setwd("/Users/Julian/Dropbox (alvarezlab)/Research-DeFreitas/Projects/moralCapture/moralCapture_data_github/e3c_moral_wrongness/data_and_analysis/data")
files <- list.files(pattern=('*txt'))
myJSON <- lapply(files, function(x) fromJSON(file=x)) #join into one single JSON file
(data <- lapply(myJSON, function(myJSON) { as.data.frame(myJSON) }))
data <- (data <- do.call(rbind, data))
# num ss recruited
dim(data) #281
#subset who got comprehension question wrong.
data <- subset(data,(data$trialStruct.comprehension == "E"));
dim(data)
data <-subset(data,(data$trialStruct.displayTime < 4225 & data$trialStruct.displayTime > 4175))
dim(data) #243
281-243 #38 excluded
sex <- as.factor(data$trialStruct.sex)
table(sex)[1]/sum(table(sex))
age <- as.numeric(levels(data$trialStruct.age))[data$trialStruct.age]
mean(age)
# exclusions after 'which car' exclusion
data <- subset(data,(data$trialStruct.whichCar_choice == 2))
dim(data) #163
#% who got which car q correct
100 - (((243 - 163)/243)*100)
dim(data) #163
condNames <- c('Grouping')
## assign variable names
cond <- as.factor(data$trialStruct.cond)
wrong <- as.numeric(levels(data$trialStruct.wrongness_scaled))[data$trialStruct.wrongness_scaled]
wrong_choice <- as.factor(data$trialStruct.wrongness_choice)
# baseline
baseline_mean <- mean(wrong[cond == 0]); baseline_mean
baseline_sd <- sd(wrong[cond==0]); baseline_sd
baseline_length <- length(wrong[cond == 0]); baseline_length
baseline_sem <- baseline_sd/sqrt(baseline_length); baseline_sem
baseline_add_sem <- baseline_mean + baseline_sem
baseline_minus_sem <- baseline_mean - baseline_sem
alpha = .05;
numConds = 1;
wrong_mat <- matrix(NA,numConds,5)
colnames(wrong_mat) <- c('cond','mean','sd','n','sem')
wrong_mat[1,] <- c(1,mean(wrong[cond == 1]),sd(wrong[cond==1]), length(wrong[cond == 1]),0)
wrong_mat[1,5] <- wrong_mat[1,3]/sqrt(wrong_mat[1,4])
wrong.summary <- as.data.frame(wrong_mat, stringsAsFactors=F); wrong.summary
condNames <- c('Grouping')
group.colors <- c("1" = "#808080")
## bar plot - wrongness scaled
title <- c('Wrongness Judgments')
p1<-ggplot(wrong.summary,aes(x=factor(cond),y=mean,fill=factor(cond))) +
scale_fill_manual(values=group.colors) +
stat_summary(fun.y=mean,position=position_dodge(),geom="bar")+theme_bw()+coord_cartesian(ylim=c(1, 8))
p1+geom_errorbar(aes(ymax=mean+sem, ymin=mean-sem), position="dodge")+ggtitle(title)+
scale_x_discrete(breaks = 1:length(condNames), labels=condNames)+
theme(panel.grid.major = element_blank(),legend.position="none", panel.grid.minor = element_blank(), axis.title.y=element_blank())+
theme(text = element_text(size=20), axis.text.x = element_text(angle = 45, hjust=1))+
xlab("Condition")+ylab("Mean") + geom_hline(yintercept = baseline_add_sem) +
geom_hline(yintercept = baseline_minus_sem) + geom_hline(yintercept = baseline_mean, lty=5)
## bar plot - blame mcq
wrongTable <- matrix(NA,6)
wrongTable[1] <- length(wrong_choice[cond==1 & wrong_choice==1])/length(wrong_choice[cond==1])
wrongTable[2] <- length(wrong_choice[cond==0 & wrong_choice==1])/length(wrong_choice[cond==0])
barplot(wrongTable[1], beside=TRUE,ylim=c(0,1.0), col=group.colors,
legend.text=TRUE, main="Proportion Saying Driver is Wrong", cex.axis=1.0, cex.main = 1.5,names = condNames,ylab="Proportion")
abline(a= wrongTable[2], b = 0)
##============================= analysis: blame scaled =================================================================================
table(cond)
t.test(wrong ~ cond, var.equal=TRUE, paired=FALSE)
tes(-4.9106,67,96) #0.78
wrongTable
wrongChoiceTable <- table(wrong_choice,cond); wrongChoiceTable
# no context v. grouping
length(cond)
chisq.test(cond, wrong_choice)
# no context v. grouping
length(cond)
chisq.test(cond, wrong_choice)
chisq.test(wrongChoiceTable)
cramersV(wrongChoiceTable)
